# Measured Move (MM)
# by EBtrader Jan 2017
# Logic enhanced by Trader0011
#     Normalize the plotted values to create a balanced distribution.
#     Introduce conditions to prevent excessive overlap of lines and labels.
#     Provide flexibility to toggle visibility for specific plots to declutter the chart.

input n = 8;
input ShowLines = yes;

def h = high;
def l = low;
def Firstbar = BarNumber();
def Highest = fold i = 1
             to n + 1
             with p = 1
             while p
             do h > GetValue(h, -i);
def A = if (Firstbar > n
            and h == Highest(h, n)
            and Highest)
            then h
            else Double.NaN;
def Lowest = fold j = 1
            to n + 1
            with q = 1
            while q
            do l < GetValue(l, -j);
def B = if (Firstbar > n
            and l == Lowest(l, n)
            and Lowest)
            then l
            else Double.NaN;
rec Al = if !IsNaN(A)
             then A
             else Al[1];
rec Bl = if !IsNaN(B)
             then B
             else Bl[1];

plot ph = Round(A, 2);
ph.SetPaintingStrategy(PaintingStrategy.VALUES_ABOVE);

plot hL = if Al > 0
          then Al
          else Double.NaN;
hL.SetHiding(!ShowLines);
hL.SetPaintingStrategy(PaintingStrategy.DASHES);
hL.SetDefaultColor(Color.GREEN);

plot pl = Round(B, 2);
pl.SetPaintingStrategy(PaintingStrategy.VALUES_BELOW);

plot ll = if Bl > 0
          then Bl
          else Double.NaN;
ll.SetHiding(!ShowLines);
ll.SetPaintingStrategy(PaintingStrategy.DASHES);
ll.SetDefaultColor(Color.RED);

# Targets
# Lower Targets
def Targetlow = Bl - AbsValue(Bl - Al);
AddLabel(yes, "1stLowTgt " + Round(Targetlow, 2), Color.RED);

plot low = Bl;
low.SetDefaultColor(Color.RED);
low.SetStyle(Curve.SHORT_DASH);
low.SetLineWeight(2);

plot firstlow = Targetlow;
firstlow.SetDefaultColor(Color.CYAN);
firstlow.SetStyle(Curve.SHORT_DASH);
firstlow.SetLineWeight(2);

# Upper Targets
def Targethigh = Al + AbsValue(Bl - Al);
AddLabel(yes, "1stHighTgt " + Round(Targethigh, 2), Color.GREEN);

plot high = Al;
high.SetDefaultColor(Color.GREEN);
high.SetStyle(Curve.SHORT_DASH);
high.SetLineWeight(2);

plot firsthigh = Targethigh;
firsthigh.SetDefaultColor(Color.CYAN);
firsthigh.SetStyle(Curve.SHORT_DASH);
firsthigh.SetLineWeight(2);

# Ticks to Targets
def tickstotgthigh = AbsValue(close - high);
AddLabel(yes, "Ticks to High Tgt: " + Round(tickstotgthigh, 2), Color.GREEN);

def tickstotgtlow = AbsValue(close - firstlow);
AddLabel(yes, "Ticks to Low Tgt: " + Round(tickstotgtlow, 2), Color.RED);

# Ensure proper scaling by normalizing data
def chartMin = Min(low, Min(firstlow, Min(high, firsthigh)));
def chartMax = Max(high, Max(firsthigh, Max(low, firstlow)));
AddChartBubble(close == chartMin, chartMin, "Min", Color.YELLOW, yes);
AddChartBubble(close == chartMax, chartMax, "Max", Color.YELLOW, no);
